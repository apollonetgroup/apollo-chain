net {
  type = mainnet
}

storage {
  db.version = 2,
  db.engine = "LEVELDB",
  db.directory = "database/sn",
  index.directory = "index",
  properties = [
  ]
}

# this part of config is used to node discovery.
node.discovery = {
  enable = true  # you should set this entry value with ture if you want your node can be discovered by other node.
  persist = true  # this entry is used to determined to whether storing the peers in the database or not.
  bind.ip = ""
  external.ip = 127.0.0.1
}

# this part of config is used to set backup node for witness service.
node.backup {
  port = 10001
  priority = 8
  members = [
  ]
}

node {
  # trust node for solidity node
  # trustNode = "ip:port"
   trustNode = "127.0.0.1:19001"

  # expose extension api to public or not
  walletExtensionApi = true

  listen.port = 19000

  connection.timeout = 2

  tcpNettyWorkThreadNum = 0

  udpNettyWorkThreadNum = 1

  # Number of validate sign thread, default availableProcessors / 2
  # validateSignThreadNum = 16

  maxActiveNodes = 30

  maxActiveNodesWithSameIp = 2

  minParticipationRate = 0

  # check the peer data transfer ,disconnect factor
  disconnectNumberFactor = 0.4
  maxConnectNumberFactor = 0.8
  receiveTcpMinDataLength = 2048
  isOpenFullTcpDisconnect = true

  p2p {
    version = 9999 # 11111: mainnet; 20180622: testnet; you can set other number when you deploy one private net, but the node must have the same number in some private net. 
  }

  active = [
  ]

  passive = [
  ]

  http {
    fullNodePort = 19002
  }

  rpc {
    port = 19001

    # Number of gRPC thread, default availableProcessors / 2
    # thread = 16

    # The maximum number of concurrent calls permitted for each incoming connection
    # maxConcurrentCallsPerConnection =

    # The HTTP/2 flow control window, default 1MB
    # flowControlWindow =

    # Connection being idle for longer than which will be gracefully terminated
    maxConnectionIdleInMillis = 60000

    # Connection lasting longer than which will be gracefully terminated
    # maxConnectionAgeInMillis =

    # The maximum message size allowed to be received on the server, default 4MB
    # maxMessageSize =

    # The maximum size of header list allowed to be received, default 8192
    # maxHeaderListSize =

    # Transactions can only be broadcast if the number of effective connections is reached.
    minEffectiveConnection = 0
  }

}

seed.node = {
  ip.list = [
     "127.0.0.1:17000",
     "127.0.0.1:19000"
  ]
}

genesis.block = {
  # Reserve balance
  assets = [
    {
      accountName = "ipc"
      accountType = "AssetIssue"
      address = "AJJvWQRVUfyMbkdUEc4htKhVVEZrLfF5Bh"
      balance = "95000000000000000"
    },
    {
      accountName = "ipcwitnesse"
      accountType = "AssetIssue"
      address = "AUwiEjhpN59dqypQH3GNK7cPpUgUZ76KVR"
      balance = "0"
    },
    {
      accountName = "blackhole"
      accountType = "AssetIssue"
      address = "AVsDaRKqFfvHALF3zRFUR3it3Srdus8cij"
      balance = "-9223372036854775808"
    },
    {
      accountName = "grant"
      accountType = "AssetIssue"
      address = "AFhp3PH7SE89urHi124kYWPaDUvh6hLmdg"
      balance = "0"
    }
  ]

  witnesses = [
    {
      address: AUwiEjhpN59dqypQH3GNK7cPpUgUZ76KVR,
      url = "http://ipc-us.org",
      voteCount = 10000
    }
  ]
  timestamp = "0" #2017-8-26 12:00:00
  parentHash = "957dc2d350daecc7bb6a38f3938ebde0a0c1cedafe15f0edae4256a2907449f6"
}

localwitness = [
  746946e6b74e8be2b593df443fc2f3ee19f7862210101943c976c3645dd268df  # you must enable this value and the witness address are match.
]

block = {
  needSyncCheck = false # first node : false, other : true
  maintenanceTimeInterval = 21600000 // 1 day: 86400000(ms), 6 hours: 21600000(ms)
}


vm = {
  supportConstant = true
  minTimeRatio = 0.0
  maxTimeRatio = 5.0
}

committee = {
  allowCreationOfContracts = 1  //mainnet:0 (reset by committee),test:1
  allowTvmConstantinople = 1
  allowTvmFreeze = 1
  allowMultiSign = 1
  allowTvmTransferTrc10 = 1
  allowTvmConstantinople = 1
  allowTvmIstanbul = 1
  allowTvmVote = 1
  changedDelegation = 1
}

event.subscribe = {
  native = {
    useNativeQueue = true // if true, use native message queue, else use event plugin.
    bindport = 5555 // bind port
    sendqueuelength = 1000 //max length of send queue
  }

  path = "" // absolute path of plugin
  server = "" // target server address to receive event triggers
  dbconfig = "" // dbname|username|password
  contractParse = true,
  topics = [
    {
      triggerName = "block" // block trigger, the value can't be modified
      enable = false
      topic = "block" // plugin topic, the value could be modified
    },
    {
      triggerName = "transaction"
      enable = false
      topic = "transaction"
    },
    {
      triggerName = "contractevent"
      enable = false
      topic = "contractevent"
    },
    {
      triggerName = "contractlog"
      enable = false
      topic = "contractlog"
    },
    {
      triggerName = "solidity" // solidity block event trigger, the value can't be modified
      enable = true            // the default value is true
      topic = "solidity"
    }
  ]

  filter = {
    fromblock = "" // the value could be "", "earliest" or a specified block number as the beginning of the queried range
    toblock = "" // the value could be "", "latest" or a specified block number as end of the queried range
    contractAddress = [
      "" // contract address you want to subscribe, if it's set to "", you will receive contract logs/events with any contract address.
    ]

    contractTopic = [
      "" // contract topic you want to subscribe, if it's set to "", you will receive contract logs/events with any contract topic.
    ]
  }
}