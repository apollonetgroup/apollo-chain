package stest.apollo.wallet.dailybuild.tvmnewcommand.zenProofCommand;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

import java.util.HashMap;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

import lombok.extern.slf4j.Slf4j;

import org.apollo.api.WalletGrpc;
import org.apollo.api.WalletSolidityGrpc;
import org.apollo.common.crypto.ECKey;
import org.apollo.common.utils.ByteArray;
import org.apollo.common.utils.Utils;
import org.apollo.core.Wallet;
import org.apollo.protos.Protocol.TransactionInfo;
import org.junit.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;

import stest.apollo.wallet.common.client.Configuration;
import stest.apollo.wallet.common.client.Parameter;
import stest.apollo.wallet.common.client.utils.PublicMethed;

@Slf4j
public class verifyTransferProof001 {

  private final String testNetAccountKey = Configuration.getByPath("testng.conf")
      .getString("foundationAccount.key2");
  private final byte[] testNetAccountAddress = PublicMethed.getFinalAddress(testNetAccountKey);
  byte[] contractAddress = null;
  String txid;
  ECKey ecKey1 = new ECKey(Utils.getRandom());
  byte[] contractExcAddress = ecKey1.getAddress();
  String contractExcKey = ByteArray.toHexString(ecKey1.getPrivKeyBytes());
  private Long maxFeeLimit = Configuration.getByPath("testng.conf")
      .getLong("defaultParameter.maxFeeLimit");
  private ManagedChannel channelFull = null;
  private WalletGrpc.WalletBlockingStub blockingStubFull = null;
  private ManagedChannel channelFull1 = null;
  private WalletGrpc.WalletBlockingStub blockingStubFull1 = null;
  private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity = null;
  private String fullnode = Configuration.getByPath("testng.conf").getStringList("fullnode.ip.list")
      .get(0);
  private String fullnode1 = Configuration.getByPath("testng.conf")
      .getStringList("fullnode.ip.list").get(1);

  @BeforeSuite
  public void beforeSuite() {
    Wallet wallet = new Wallet();
    Wallet.setAddressPreFixByte(Parameter.CommonConstant.ADD_PRE_FIX_BYTE_MAINNET);
  }

  @BeforeClass(enabled = true)
  public void beforeClass() {
    PublicMethed.printAddress(contractExcKey);
    channelFull = ManagedChannelBuilder.forTarget(fullnode).usePlaintext(true).build();
    blockingStubFull = WalletGrpc.newBlockingStub(channelFull);
    channelFull1 = ManagedChannelBuilder.forTarget(fullnode1).usePlaintext(true).build();
    blockingStubFull1 = WalletGrpc.newBlockingStub(channelFull1);
    txid = PublicMethed
        .sendcoinGetTransactionId(contractExcAddress, 10000000000L, testNetAccountAddress,
            testNetAccountKey, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    String filePath = "src/test/resources/soliditycode/verifyTransferProof001.sol";
    String contractName = "verifyTransferProofTest";
    HashMap retMap = PublicMethed.getBycodeAbi(filePath, contractName);
    String code = retMap.get("byteCode").toString();
    String abi = retMap.get("abI").toString();
    contractAddress = PublicMethed
        .deployContract(contractName, abi, code, "", maxFeeLimit, 0L, 100, null, contractExcKey,
            contractExcAddress, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
  }

  @Test(enabled = true, description = "data is empty")
  public void test01DataIsEmpty() {
    String method = "test1()";
    txid = PublicMethed
        .triggerContract(contractAddress, method, "", false, 0, maxFeeLimit, contractExcAddress,
            contractExcKey, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = PublicMethed
        .getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(0, infoById.get().getResultValue());
    Assert.assertEquals("0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000000",
        ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()));
  }

  @Test(enabled = true, description = "data length limit")
  public void test02DataLengthLimit() {
    String method = "test2(bytes)";
    Optional<TransactionInfo> infoById = null;
    // length:2048
    String argsStr1 = "\"0000000000000000000000000000000000000000000000000000000000000520"
        + "0000000000000000000000000000000000000000000000000000000000000680"
        + "00000000000000000000000000000000000000000000000000000000000006e0"
        + "f3e912b1f0d8e6a6654c1e9ff16d9eb5c2895b35490a5fa825d275d842efb5e5"
        + "45ae827a6fb105d6fc6d125c2a8c1253f753b4973a6505b671b0c01b6ef3ac06"
        + "4f4aca9fdf2a460e95df34315749ac432cd5154ad42217b7296b3b5bd81dd00b"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "363f4cb9b6605bbd39b3ccf4fdc834721afc8d38cd25becc7830dab5cacf1852"
        + "32431ad6d4cfa89730b413b4ca2f744623a0b4b8315fc5e307ed62a043fa4064"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000003"
        + "0000000000000000000000000000000000000000000000000000000000000001"
        + "66b02f76abecb4de13adc2b9b48edf60edf7e243dba5930276655936b53019ee"
        + "626327f3509cadc915c8df9d9f97e17f244c828f3ad82b19f6701ae09dc0e22e"
        + "659d5386266aef0a8434fe2ac728a655071f4688ad6cd1dae6e58e4767e1a36a"
        + "d2614240434f15b189c8f235e35b281454988d72518df3068d8f512fe992e564"
        + "a27d2c53207376e3f179aed8f415acbe1bca1a9ec60188f6fea1d1fd99f80db2"
        + "c70271638ea0aa5d99e49fca76157e7692c856f4056b7857ed5ce852e69c713f"
        + "42dd888295906c9988cc7fdd6715ea2dac745e97fa8ffd63653ee8e17b8a2ada"
        + "1148bed585f91c1ab2f38f77e78a4dacd86587ac899961665e0a6f34d7cf0a41"
        + "0f1032d3c26d0ab381ba3fd45f1cbb36b04f889584c1868fdc448eaab9bb8592"
        + "d91a58c9e735862cdd346201fb9ab75999c6a57a6a474f2248f71c631375f0a8"
        + "0000000000000000000000000000000000000000000000000000000000000001"
        + "8dcbff6a27f4e6b39c6e19aab7deb9427368bc8dc1082f0dfe57edc94fbb8c3e"
        + "1eb36d9f48c5243dad16ab511dcea3c8489ba0dd774befb12fc58f1ae50e7504"
        + "0000000000000000000000000000000000000000000000000000000000000001"
        + "9fa6ed64a910bee735eafdb80636852367f6a487f6aec0598708ad80cad8ed09"
        + "7aa9686c3cc957f88703e1eea87c5412baba2044c78e9161a7b2ac2b21bfef9b"
        + "83ca769ba273d3fe1d4cc0d5d0d1ab8a6540f220c1db981fc8885ee34b51263f"
        + "90f31816d21895f518bbb893c62ce296ee8416486c37b9dba9d0cb3cdd5f58c5"
        + "7e175a69dbf443509bc060f354862d9787490de120ae665cbcba894854eb8aaf"
        + "b811e676c506f7c4f2038afa09fc56b66c0c9cefcc00d780d152f1633d1c90af"
        + "058355203f7737de6184b08bbf84248f118c3b540a7dc8f5518676fe0ebb2b35"
        + "e4c3ec5f6b2f93138c7e7aa4a9b631dc9786b6df2d317208f220055d3fcab328\"";
    txid = PublicMethed.triggerContract(contractAddress, method, argsStr1, false, 0, maxFeeLimit,
        contractExcAddress, contractExcKey, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    infoById = PublicMethed
        .getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(0, infoById.get().getResultValue());
    Assert.assertEquals("0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000000",
        ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()));

    // length:2784
    String argsStr2 = "\"0000000000000000000000000000000000000000000000000000000000000520"
        + "00000000000000000000000000000000000000000000000000000000000007c0"
        + "0000000000000000000000000000000000000000000000000000000000000860"
        + "898bb618ff2874a2b706e000d663c8e7ff7095ca404e131ce712583d7a3bf717"
        + "b7b6ec3705a0823d09524e13c81bd4f44e6c796e63b197ffcdb6ec7bb44ff505"
        + "2487fbd8a96638187266aa9c54795e0c14aabcd72d45b6d13ba304b539cbc7ed"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "82f70d55b1d9131cd3d41b7491636291a5ac41ed3372e4fe502d1c4a911cce4b"
        + "49c6eaf2968c27437831622072b8f8cfa18791084189e7c4764c104a360bbe70"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000000"
        + "0000000000000000000000000000000000000000000000000000000000000002"
        + "0000000000000000000000000000000000000000000000000000000000000002"
        + "7c62133e78f43c71c49e8b85b145377c51c7d4dfd7c44656d62363144f243575"
        + "1f2b46d412955c11a51cd81f6499bd0e9cf9c5a3fa12befe26b1e992e41cfd4c"
        + "f1243c6008688639d9dffa4670b74546f66be60209a9c5664a9de7dcca856f6a"
        + "fdfb2e8cf0083a20dbf2899042baa469949f7993f7b0f3606d70f443486ebf46"
        + "9232a4e7a899e52a7479d9ca981ee7fe96250e4ef8d6899d89e8c33be62ac65c"
        + "a97e4cd3d9a58033d35f9a7c45375f0b8866db6db15fcbd185e6c254cd0300b9"
        + "364a3c2d9499e474bf207ce2f2b67427df0796d2c221efb28b7fccea210b58ba"
        + "01f5a9b4a12eb295ab0fecbe97f01bf4841002e94e1334a513755403f6832ce3"
        + "0ab328b11e8772aa922dc7c84768c887b38b35e39df177e3fc4f760051209e1a"
        + "9dfef66affba94f21d5a28c39a893419af506faee2217f0c605830427173a7d5"
        + "521c7b5bf3ff99421c69c861af0fc30b565332ff1aad344afd9dd7b40e3da769"
        + "67ecbac59d221641a28b19134e599c1d20c5cc55ac45217a68b0b9106872b92a"
        + "8d55ca2e65e84ccd45a21d88a0eec096d98525d7e6751d4dbc4ddcb6aaec334b"
        + "c7061b48ba27b89f193ad9e9f4d9c98aa1316b08f018222a3d92c1da7e8b7611"
        + "806764eeb09ac490eea1f01d16ba8378e0c64396a0c06a707ed6027eae76938e"
        + "74fa404d1ed9a955c7fe85eabc07b76eb58287d749a8dd304e810f94f680120b"
        + "6e792117717f8b5b7f9f01416205900d962ffb69540e85562688604c26db4987"
        + "0de0658d072aeb649809bf6f21714975f87e75df545e583c77bd6f786b3cc5c6"
        + "08051b7885a732ac9bd49271d7ae9caea7d995d2ce5b18740f2b5b0de32d1337"
        + "46f30ae9eb6d1f54ea1e4e228b6a22849a99f0a2decd09c806d8bd7cad6810de"
        + "0000000000000000000000000000000000000000000000000000000000000002"
        + "c68b0fa0e76ffae969421ef87a0e27e4ad5a94b5bf2b5237c0a0e57259f20e60"
        + "60525cfbc22ff838b067110121840a6885bff4516a5dc21eedce04f79b04b403"
        + "10e640233b876885329599a78ce1cdc5dff83a29216f7fe58f225338963ec9b4"
        + "9811e7479ef258776289394525c1070b70d3aeacb6d9d4a9065024ca21d8ed08"
        + "0000000000000000000000000000000000000000000000000000000000000002"
        + "73238d94e2ad7575eb6067b1e5889a8445ef29dc377bdba0807f716b0b75b13e"
        + "00ef0b6303b098a8af5e2deb8d506aaa710a58805325aa2097c19a63b876e5b4"
        + "26e055e92683f24fab7c79b7d8825928fc3dc356d496c09069b8fd0d01df275b"
        + "b0a57952d3adc1f31570d3626d2011a725f9caaf857e253b4e4791adfb7babe7"
        + "27c0b4791f16050dfdb1a4763f75fd0f970ca19ee66c36462e43dff2899c5d62"
        + "3e363389f3dedb855c09e051f20f3f27ee52d2d267ae1f1bf024c2f63068b682"
        + "0b578b39aebb57b8fc055a7d13d25574dfcde58656beec84dde4ba439b0bbb5d"
        + "0b5b24a2cf71f6b68b56c5ef1bac89888b5b6827bca8cd8b47fc394cf89a6c23"
        + "468f7857b566cddf39f06eed6ac079f20044b42381fb0ca969c4f425ed04e166"
        + "09e582987c6af094c8afbfeb52e14b0e4e342c82dc784405631f4a985c826e51"
        + "4a9b50b6ad41db1a403b0ced0f5f1e4a9ae2964237b6874056c8044233b331e1"
        + "a8bcf84d0584c12dc42ebd27cca972b31c475a644450afcfd40c36c739740566"
        + "8b377c8ed99dcca1a5ec03ca990d6c4cb846ad561dd204c66c834fc024030b75"
        + "106bdca9e57e8d68d19e4183a349bc488b9c3d666f59f9bdca8e92457dbbacf5"
        + "1a0e074d5cb64b54e533aef3d1da2b673b7a87cae612c7faed50563a20970a9b"
        + "07539d7ea4d57a83defeaefa024832fe6ec1db4c3a4ef6badcc4d95e0d22f4ec"
        + "e4f272a22dcfaa2326bc301f2dfac22fa35bd0c9a40262caf424e2e62b3e0a45"
        + "c2fa591c482e923a2d6b3c4ba0819df430f4d548105071f7cb561749459f15d2"
        + "c2fa591c482e923a2d6b3c4ba0819df430f4d548105071f7cb561749459f15d2\"";
    txid = PublicMethed.triggerContract(contractAddress, method, argsStr2, false, 0, maxFeeLimit,
        contractExcAddress, contractExcKey, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    infoById = PublicMethed
        .getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(0, infoById.get().getResultValue());
    Assert.assertEquals("0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000000",
        ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()));
  }

  @Test(enabled = true, description = "tree width limit")
  public void test03TreeWidthLimit() {
    String method = "test2(bytes)";
    txid = PublicMethed.triggerContract(contractAddress, method,
        "\"0000000000000000000000000000000000000000000000000000000000000520"
            + "0000000000000000000000000000000000000000000000000000000000000680"
            + "00000000000000000000000000000000000000000000000000000000000006e0"
            + "f3e912b1f0d8e6a6654c1e9ff16d9eb5c2895b35490a5fa825d275d842efb5e5"
            + "45ae827a6fb105d6fc6d125c2a8c1253f753b4973a6505b671b0c01b6ef3ac06"
            + "4f4aca9fdf2a460e95df34315749ac432cd5154ad42217b7296b3b5bd81dd00b"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "363f4cb9b6605bbd39b3ccf4fdc834721afc8d38cd25becc7830dab5cacf1852"
            + "32431ad6d4cfa89730b413b4ca2f744623a0b4b8315fc5e307ed62a043fa4064"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000000ffffffff"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "66b02f76abecb4de13adc2b9b48edf60edf7e243dba5930276655936b53019ee"
            + "626327f3509cadc915c8df9d9f97e17f244c828f3ad82b19f6701ae09dc0e22e"
            + "659d5386266aef0a8434fe2ac728a655071f4688ad6cd1dae6e58e4767e1a36a"
            + "d2614240434f15b189c8f235e35b281454988d72518df3068d8f512fe992e564"
            + "a27d2c53207376e3f179aed8f415acbe1bca1a9ec60188f6fea1d1fd99f80db2"
            + "c70271638ea0aa5d99e49fca76157e7692c856f4056b7857ed5ce852e69c713f"
            + "42dd888295906c9988cc7fdd6715ea2dac745e97fa8ffd63653ee8e17b8a2ada"
            + "1148bed585f91c1ab2f38f77e78a4dacd86587ac899961665e0a6f34d7cf0a41"
            + "0f1032d3c26d0ab381ba3fd45f1cbb36b04f889584c1868fdc448eaab9bb8592"
            + "d91a58c9e735862cdd346201fb9ab75999c6a57a6a474f2248f71c631375f0a8"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "8dcbff6a27f4e6b39c6e19aab7deb9427368bc8dc1082f0dfe57edc94fbb8c3e"
            + "1eb36d9f48c5243dad16ab511dcea3c8489ba0dd774befb12fc58f1ae50e7504"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "9fa6ed64a910bee735eafdb80636852367f6a487f6aec0598708ad80cad8ed09"
            + "7aa9686c3cc957f88703e1eea87c5412baba2044c78e9161a7b2ac2b21bfef9b"
            + "83ca769ba273d3fe1d4cc0d5d0d1ab8a6540f220c1db981fc8885ee34b51263f"
            + "90f31816d21895f518bbb893c62ce296ee8416486c37b9dba9d0cb3cdd5f58c5"
            + "7e175a69dbf443509bc060f354862d9787490de120ae665cbcba894854eb8aaf"
            + "b811e676c506f7c4f2038afa09fc56b66c0c9cefcc00d780d152f1633d1c90af"
            + "058355203f7737de6184b08bbf84248f118c3b540a7dc8f5518676fe0ebb2b35"
            + "e4c3ec5f6b2f93138c7e7aa4a9b631dc9786b6df2d317208f220055d3fcab328"
            + "d50b3131146a9b97443fca616d401b0f5e7c51b3c71b91c3637df35cf4b91864\"",
        false, 0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = PublicMethed
        .getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(0, infoById.get().getResultValue());
    Assert.assertEquals("0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000000",
        ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()));
  }

  @Test(enabled = true, description = "spend count greater than 2")
  public void test04SpendCountGreaterThan2() {
    String method = "test2(bytes)";
    txid = PublicMethed.triggerContract(contractAddress, method,
        "\"0000000000000000000000000000000000000000000000000000000000000521"
            + "0000000000000000000000000000000000000000000000000000000000000680"
            + "00000000000000000000000000000000000000000000000000000000000006e0"
            + "e5ae9d43a82fc3bc74272dbe20dcf99d2d37ff4ae1689c3f9b53d40113cf5fa8"
            + "77e4f78bef9e692985e3a7cd08b92a8380aa0aaec623b7cf3aae5c5a13b41602"
            + "9b40cc7690e15b1437f1d88aaf3b44649e23cbd4013b4b41da1efdf31b774779"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "22389ba23e8f871b2a2e71d87c67f03eaace9849e59e8cfd54d5ca783c9b8923"
            + "2108740b5326d2802e5a09a263a2668f987425af3f76d61a5d3fa98896ea2a52"
            + "db286eec8ac754634b2e099f661b194b79d99c4fc33f9eef975b1b2862f72866"
            + "60b225e4f8a010864d82e87cbec9d1fab63a6ae57f04a03f0ced73fb7ba73a71"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000000000d"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "fa05291a6d8af85cf9dc46f04687c31c12a4de8b2e9b51a55f2b777fb0220ddb"
            + "c11bbb1f5025494923823c12fe864d290958384d5bc5e4d920e2bd9db70d005b"
            + "b609c343bf7a9b3275ef9419ec1c5dfca574b9e17d67a782b745d2a4c830346d"
            + "c77bfd763dfab3fa57596693a828cba2dbbd43fa0daa454136cd61f303e66d72"
            + "b91efc162b5a4474b71f9b688af8513bc0e19fbcc834223c02c942f504c4286a"
            + "359462bc8993d7b41aead7ac25a25c64b5ae662cea2370ff912e2b2a6ef76bbe"
            + "f5ae2a40d920ee79197c99b9ba92df929d445bbd4a0384ce3e637d59939086dc"
            + "06042ef2abbb6ea7a599acac186d8fce957c1632d1dc64c9cc04a4a597d42923"
            + "491440cfa5bf9c0d387ef77902921343929900044165384c73b30b38c466e4f6"
            + "d71f6c1e1b6af43ce2ec0572cd3a28e7c1d5caab600cb001effd07e4182e89be"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3f153ababa83e18ff39b3149b893d90aebd440521b670b10e8268f7a98f42f06"
            + "64efcf611c6c0e11f9edfeca53af7e8fc758f92b713fb4c104df4f6868eb6807"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "4fd0c6e8ed03c4e7797c4da435e5da8b7ecf63c765c8f5817fe29aa4f54e6057"
            + "fc5dda67c0109f8ce48344c9c55fb8081a79ad549bd7d162b3f334a9219f8169"
            + "a2f5c0f129ac81ab9f93b13a09ec25b40356420dbfe9aa21d367af61415a6a45"
            + "82b5efd3f827c7ca99371b1a029e1781156f068e000fdb26ea1b078ce24ae4e1"
            + "571001515de0d6d55d2eb7ed4371397b993b2fe4df3addd53248e3adfc24c6fe"
            + "81e7b3679ba49fb7e5ef8c13661e7d442210cac48e93398f6d731b3770fcb23e"
            + "01c0d34d139df0c31c1dbdf8b08fe0d6029845b1abc990986408191905d04e76"
            + "44dd0fc25446d753e94638ee48bb5e088f4483ce9e648093e654ba762ea516df"
            + "5bb29cb95cfe347fc2f109ff86d5596bdb89c116b4805b9c6bdc019049b597f3"
            + "ee52b22ececc9c7bc4d2c4dd61f9e16bc9feb07a5575f28e577a2d67c1eb3d24"
            + "d6583d39f9ea3fe2de10132de6303217cca345201a194ecde8ad098f49d3f63b"
            + "2f1f12c99a24d5779e7b4d1e6aa4fc3e1f0bd671701f42e43f3530501e7e2c00"
            + "b47f9f2c332b75a849eb94a260a9d2a846212562ec57e927e071962ddc5dda5c"
            + "dd9d38d346666659216b4897492ee991b359f9d3adf8bb576720f3b1d49be957"
            + "a5c39e894b98bea2538645b434d47e4e7c71fdf765aeae264dd916ff41542eee"
            + "063bbed2ff1e40ee1a2a949d5bd197e5936709cdb68151108221b8478fa15d86"
            + "d8aff952d21265677a1a363cf7f492de8c0715cb95960d149842e3cee99bdb32\"",
        false, 0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = PublicMethed
        .getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(0, infoById.get().getResultValue());
    Assert.assertEquals("0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000000",
        ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()));
  }

  @Test(enabled = true, description = "duplicate nullifiers")
  public void test05DuplicateNullifiers() {
    String method = "test2(bytes)";
    txid = PublicMethed.triggerContract(contractAddress, method,
        "\"0000000000000000000000000000000000000000000000000000000000000520"
            + "00000000000000000000000000000000000000000000000000000000000007c0"
            + "0000000000000000000000000000000000000000000000000000000000000860"
            + "f95c0de8b0b573b6a302be34f42cab92fb84ad87be4c9e7c5016ccf4e5692552"
            + "79279550d90ed369e0c60b07bc0ace565391941aff977ea101b221c26c14490d"
            + "43b5d1b2f29511ff3425e353eb022493f3771203daff96e326477afbe34f7357"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0d9a42f99c055f6218415145bdd3b18496273ccd579c9370cbb312505e65ac2f"
            + "88a987bdf381b7a6c41f5683334f9becdec01ab10fa4976a9b15191b9e33fc5c"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "0a43f2568d0aca1a589ff1b76a5147123e1b2c76634970378d742088d68187d7"
            + "ed942fe6a584633ab56c66b5824fa24e1380d371abf8aedbcae1b45927fcc236"
            + "216f0eafbbdee5f09a136f5dedd86ac5a1ebe7317942bc1999cd0b0b1c11b707"
            + "295f566ff309ea8510919d2507b558d7f88151746aab05866a8708d1d70acf42"
            + "80f40957fe79d81223cbe9f4eef86be1d4ab19fd3f26f6e08aa27477a8b2160f"
            + "44de6d5ce257eccdf91ab3de59461420b20ee95a75bd031f117796e9d1995e85"
            + "0c8900a176dd7fc60694716ef82d6ba5d72698f5580503575cecf09a912574d0"
            + "02d9761fef0f283242404cbadaa10a70270dae33899c626f27cc626e2c7737d7"
            + "5cf62af8190938d92f04d9cb4fcab07d98482843c9b062d5a3c48b1d6259f94c"
            + "fa6961c578ecd8b87052edd19b7dc9fa168349cc125ed8e9beddb04450e0558b"
            + "0a43f2568d0aca1a589ff1b76a5147123e1b2c76634970378d742088d68187d7"
            + "ad182389453f849cf316d7d8c1c8b0da2675c404d09a8a7efb6ab4f81e5d253e"
            + "2ab630a209d6dbd4446cc274859a4a97175cac7fc9d20544f5df8d5e6cc37856"
            + "a305d5f20688846a81e57dd6141049691495e48ad37cf38183408b4e7ff9a250"
            + "b449788c9ef60787fa698915b959979713e800c36966dc737032ab5455374854"
            + "e31eebc49b73fc73e709962c69da79e4a3eb55c7311d245e671c83213562da8f"
            + "751483514e1c9fead10186b95783a29b880f1c443fcb0c12fad1c8f4f1f1f8b2"
            + "10792470322970e28ff0f1cff37531a594a164a4af755fa0d7bb9f24c2d4d7df"
            + "2ebe0ff20d7a8a01bbc19ea13f92fe1ea3a8676cdb81efaee30ed4a0e15de0e4"
            + "7ce1f4304ad9b824b08f26d655c2c04cdb1e1bf69f8796d5360af32193cceb26"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "36ecefb9a2264d4515ef9c1dc23bd8de87930c2434c3426df4b12afc17ccde46"
            + "8e6a99a43572ea6c6110db239cd60627e927d339dfad1920bb88ce2335d91e07"
            + "eb6968339a770e46c2c7acbedfdcf93678493f2d3ea03c4a78a2f28925e0e5b4"
            + "632d959daaa129e79901713f5b8e3a233219371473b5c8f494dc28bceb399508"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "14c1d485df7f471413cf90be5bae3909ccb5812fbee683f91e1fc5b7178d8852"
            + "51a559f6632e3beb24ed1e781de05d6fbb2a4600dd9b2195cdf378a18e2a31ed"
            + "49936339e06e29754fe00956cde97338c627806596d681de95db6653d110a7a3"
            + "95617c958e1c4d81d4baa99b295bddd6c3da2d4fb9dddc886d31461224ed423a"
            + "68c4b504cbed65a19a43efe8c7f721cc9406d8251ca03bbdc6217f6f02077b45"
            + "02a1db7de8fab00edc14df913fd7369c4e28294086bd2cb86bd1559133f211b6"
            + "1382886e7feb401fdb9fc6ac186dd133d456a7a220615bb410ad79da8b0fb7b7"
            + "c404341cf42246820f2afb70466b08658d55b24d3a53707ed88b82827e1358d0"
            + "2fe7e8c746f6f7124d2dd3d1717d2859e8390f8f76147e1c767831924058ce70\"",
        false, 0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = PublicMethed
        .getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(0, infoById.get().getResultValue());
    Assert.assertEquals("0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000000",
        ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()));
  }

  @Test(enabled = true, description = "duplicate output note")
  public void test06DuplicateOutputNote() {
    String method = "test2(bytes)";
    txid = PublicMethed.triggerContract(contractAddress, method,
        "\"0000000000000000000000000000000000000000000000000000000000000520"
            + "0000000000000000000000000000000000000000000000000000000000000680"
            + "00000000000000000000000000000000000000000000000000000000000006e0"
            + "9144cda061b41702bbf641dc3864fa94bc934511895058f01b7bfbdbdb301f8c"
            + "d43a44ccd4b131e6b37bd673f8ac6e554eb5b4ab599b6d2b66bc294b7767f506"
            + "24614ac147e95287ff8351ed22aa43f2b3e82460dc79b57952e8a39bf4027c47"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "73792777f50b3c5cf7fcf88c7d24baf975c0b4132f2affa898df03874b3e8163"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "92a3ddb4b05a3903fd1d9693e047c7136ac048fd12a7384bfd569e57a265b1f9"
            + "2e96a076fcd5722ff4e04bc31cec8aeb2fa5ee3006104a3046c28c4a1584293f"
            + "d02e3f11e3ca072628d2fa4755699958223e3467ef7c2039ff699fd9616a5921"
            + "0624e9ba16fc55a77d6d872854c638a1c3b6570267130cb43770661793fa9fda"
            + "9406c39d8388060ece340e133238f9452e990d1adcc2a91a0bfe46403489043b"
            + "51ac2c88e5f0f4fe74b65eb30ec50400a5334a59f3f7f425073edf66bc3ca8cf"
            + "f599d1f6742d1ebf0e40dce32d81a4a5cafb1c0ec078a692b95c97265cce277c"
            + "11bf7216ff5df3d0d916359abe8b1a5dedf30e5bd5ccf24e6659adc9a4db9558"
            + "6369477f2a15447a56249fa1703f31b7b3800aff0cf67772d132bd74cf888ee5"
            + "4f45236c6687ac59c89a6157e001bd5190fadba40d515f739636a7dbd77b5108"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "59eca5d4562a891db660355de4de8c14afa64332a8c58afc44108798fc070cba"
            + "e90d708016a0f09278a895325c538a0773a011aa9f132dce77e073f39b864606"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "23540e10b3989fc8efdcadda1bcb840cce8580b45718082d5ace9fc4a6f4d45b"
            + "d3ad992cbf4a32ece6a7911992c82b94a54705f7fbe680b5250c9b05cb1a31ca"
            + "0d26babfd7f9614d5b3cbe84c7006f4aebcea2977d31c9761c5f7ef9c4b0a8eb"
            + "98c35f51cd4ed7eef014a56ae50b4efb6555d497991ff7b282183d82f19282d5"
            + "5ce8b8f286f6bdeae73981db2a615c7cb9c4fdaa7618502480945647aa1e98eb"
            + "4dab59853f9bb3327f7ecbfd92fde4e2f49968562b468ca060447f1036172075"
            + "163840bd0f1dca2495392228e23bf49b0934e14a145be29a9e42fb8477925c9f"
            + "5a18093e51748a2494ee9191e16511bbae6d8c71d188c46286dd6dc5213b1d7f"
            + "95eab6bade1ee763656b06c95d8e907dd8f3310722024cb9322d17724757f686"
            + "23540e10b3989fc8efdcadda1bcb840cce8580b45718082d5ace9fc4a6f4d45b"
            + "77b1609896bde81495ab555869c6ddbc5c7aac7274830f505486682093284fb6"
            + "6f4aeab08e6417ab85026d97aeedfa26407b867227639653ec7a2fb529eb3e9f"
            + "a207cb75c8eeb1c77fc3fc9949fc9c95e4b98806a9c6d7558f1f4e8f2a87df47"
            + "375dc915db5332f6abbd87967796875ea8922e70e9ba135cdeabd171273884a9"
            + "107992ee1a521f648c499620299a45031821e0639abadeec464a3ec3f439a823"
            + "15bfe031aaaba0e3bc80fc359d7c7722e448e1e671447c41592cc0f27d35e1bc"
            + "b5a4dd42ac75418f70f1a23f0de47fb6a2985ff86958816e52067612df232aa6"
            + "9b5cedeab709b800eacc4b2d81582e4bb4f0a0e51571a5b03816126b39e1c9ab\"",
        false, 0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = PublicMethed
        .getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(0, infoById.get().getResultValue());
    Assert.assertEquals("0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000000",
        ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()));
  }

  @Test(enabled = true, description = "checkResult is false")
  public void test07CheckResultIsFalse() {
    String method = "test2(bytes)";
    txid = PublicMethed.triggerContract(contractAddress, method,
        "\"0000000000000000000000000000000000000000000000000000000000000520"
            + "0000000000000000000000000000000000000000000000000000000000000680"
            + "00000000000000000000000000000000000000000000000000000000000006e0"
            + "f3e912b1f0d8e6a6654c1e9ff16d9eb5c2895b35490a5fa825d275d842efb5e5"
            + "45ae827a6fb105d6fc6d125c2a8c1253f753b4973a6505b671b0c86b6ef8ac86"
            + "4f4aca9fdf2a460e95df34315749ac432cd5154ad42217b7296b3b5bd81dd00b"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "363f4cb9b6605bbd39b3ccf4fdc834721afc8d38cd25becc7830dab5cacf1852"
            + "32431ad6d4cfa89730b413b4ca2f744623a0b4b8315fc5e307ed62a043fa4064"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000003"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "66b02f76abecb4de13adc2b9b48edf60edf7e243dba5930276655936b53019ee"
            + "626327f3509cadc915c8df9d9f97e17f244c828f3ad82b19f6701ae09dc0e22e"
            + "659d5386266aef0a8434fe2ac728a655071f4688ad6cd1dae6e58e4767e1a36a"
            + "d2614240434f15b189c8f235e35b281454988d72518df3068d8f512fe992e564"
            + "a27d2c53207376e3f179aed8f415acbe1bca1a9ec60188f6fea1d1fd99f80db2"
            + "c70271638ea0aa5d99e49fca76157e7692c856f4056b7857ed5ce852e69c713f"
            + "42dd888295906c9988cc7fdd6715ea2dac745e97fa8ffd63653ee8e17b8a2ada"
            + "1148bed585f91c1ab2f38f77e78a4dacd86587ac899961665e0a6f34d7cf0a41"
            + "0f1032d3c26d0ab381ba3fd45f1cbb36b04f889584c1868fdc448eaab9bb8592"
            + "d91a58c9e735862cdd346201fb9ab75999c6a57a6a474f2248f71c631375f0a8"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "8dcbff6a27f4e6b39c6e19aab7deb9427368bc8dc1082f0dfe57edc94fbb8c3e"
            + "1eb36d9f48c5243dad16ab511dcea3c8489ba0dd774befb12fc58f1ae50e7504"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "9fa6ed64a910bee735eafdb80636852367f6a487f6aec0598708ad80cad8ed09"
            + "7aa9686c3cc957f88703e1eea87c5412baba2044c78e9161a7b2ac2b21bfef9b"
            + "83ca769ba273d3fe1d4cc0d5d0d1ab8a6540f220c1db981fc8885ee34b51263f"
            + "90f31816d21895f518bbb893c62ce296ee8416486c37b9dba9d0cb3cdd5f58c5"
            + "7e175a69dbf443509bc060f354862d9787490de120ae665cbcba894854eb8aaf"
            + "b811e676c506f7c4f2038afa09fc56b66c0c9cefcc00d780d152f1633d1c90af"
            + "058355203f7737de6184b08bbf84248f118c3b540a7dc8f5518676fe0ebb2b35"
            + "e4c3ec5f6b2f93138c7e7aa4a9b631dc9786b6df2d317208f220055d3fcab328"
            + "d50b3131146a9b97443fca616d401b0f5e7c51b3c71b91c3637df35cf4b91864\"",
        false, 0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = PublicMethed
        .getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(0, infoById.get().getResultValue());
    Assert.assertEquals("0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000000",
        ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()));
  }

  @Test(enabled = true, description = "normal")
  public void test08Normal() {
    String method = "test3(bytes32[10][],bytes32[2][],bytes32[9][]"
        + ",bytes32[2],bytes32,uint64,bytes32[33],uint256)";
    txid = PublicMethed.triggerContract(contractAddress, method,
        "0000000000000000000000000000000000000000000000000000000000000520"
            + "0000000000000000000000000000000000000000000000000000000000000680"
            + "00000000000000000000000000000000000000000000000000000000000006e0"
            + "f3e912b1f0d8e6a6654c1e9ff16d9eb5c2895b35490a5fa825d275d842efb5e5"
            + "45ae827a6fb105d6fc6d125c2a8c1253f753b4973a6505b671b0c01b6ef3ac06"
            + "4f4aca9fdf2a460e95df34315749ac432cd5154ad42217b7296b3b5bd81dd00b"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "363f4cb9b6605bbd39b3ccf4fdc834721afc8d38cd25becc7830dab5cacf1852"
            + "32431ad6d4cfa89730b413b4ca2f744623a0b4b8315fc5e307ed62a043fa4064"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000003"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "66b02f76abecb4de13adc2b9b48edf60edf7e243dba5930276655936b53019ee"
            + "626327f3509cadc915c8df9d9f97e17f244c828f3ad82b19f6701ae09dc0e22e"
            + "659d5386266aef0a8434fe2ac728a655071f4688ad6cd1dae6e58e4767e1a36a"
            + "d2614240434f15b189c8f235e35b281454988d72518df3068d8f512fe992e564"
            + "a27d2c53207376e3f179aed8f415acbe1bca1a9ec60188f6fea1d1fd99f80db2"
            + "c70271638ea0aa5d99e49fca76157e7692c856f4056b7857ed5ce852e69c713f"
            + "42dd888295906c9988cc7fdd6715ea2dac745e97fa8ffd63653ee8e17b8a2ada"
            + "1148bed585f91c1ab2f38f77e78a4dacd86587ac899961665e0a6f34d7cf0a41"
            + "0f1032d3c26d0ab381ba3fd45f1cbb36b04f889584c1868fdc448eaab9bb8592"
            + "d91a58c9e735862cdd346201fb9ab75999c6a57a6a474f2248f71c631375f0a8"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "8dcbff6a27f4e6b39c6e19aab7deb9427368bc8dc1082f0dfe57edc94fbb8c3e"
            + "1eb36d9f48c5243dad16ab511dcea3c8489ba0dd774befb12fc58f1ae50e7504"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "9fa6ed64a910bee735eafdb80636852367f6a487f6aec0598708ad80cad8ed09"
            + "7aa9686c3cc957f88703e1eea87c5412baba2044c78e9161a7b2ac2b21bfef9b"
            + "83ca769ba273d3fe1d4cc0d5d0d1ab8a6540f220c1db981fc8885ee34b51263f"
            + "90f31816d21895f518bbb893c62ce296ee8416486c37b9dba9d0cb3cdd5f58c5"
            + "7e175a69dbf443509bc060f354862d9787490de120ae665cbcba894854eb8aaf"
            + "b811e676c506f7c4f2038afa09fc56b66c0c9cefcc00d780d152f1633d1c90af"
            + "058355203f7737de6184b08bbf84248f118c3b540a7dc8f5518676fe0ebb2b35"
            + "e4c3ec5f6b2f93138c7e7aa4a9b631dc9786b6df2d317208f220055d3fcab328"
            + "d50b3131146a9b97443fca616d401b0f5e7c51b3c71b91c3637df35cf4b91864",
        true, 0, maxFeeLimit, contractExcAddress, contractExcKey, blockingStubFull);
    PublicMethed.waitProduceNextBlock(blockingStubFull);
    Optional<TransactionInfo> infoById = PublicMethed
        .getTransactionInfoById(txid, blockingStubFull);
    Assert.assertEquals(0, infoById.get().getResultValue());
    Assert.assertTrue(
        ByteArray.toHexString(infoById.get().getContractResult(0).toByteArray()).length() > 10000);
  }

  @AfterClass
  public void shutdown() throws InterruptedException {
    long balance = PublicMethed.queryAccount(contractExcKey, blockingStubFull).getBalance();
    PublicMethed
        .sendcoin(testNetAccountAddress, balance - 1000000, contractExcAddress, contractExcKey,
            blockingStubFull);
    if (channelFull != null) {
      channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);
    }
    if (channelFull1 != null) {
      channelFull1.shutdown().awaitTermination(5, TimeUnit.SECONDS);
    }
  }

}
